--1º Crear un procedimiento que le pasemos un variable (@provincia) 
--   y nos devuelva el listado de clientes filtrado por la provincia indicada
CREATE PROCEDURE dbo.ListarClientes @provincia varchar(20)
AS
BEGIN
	SELECT *
	FROM [carrefour].[dbo].[cliente]
	Where Provincia=@provincia
END

ListarClientes Madrid;

--2º Crear un procedimiento que le pasemos un variable (@nombre) 
--   y nos devuelva la provincia output


CREATE PROCEDURE dbo.DevolverProvincia @nombre varchar(20),@provincia varchar(20) OUTPUT
AS
BEGIN
	SELECT @provincia=provincia
	FROM [carrefour].[dbo].[cliente]
	Where nombre=@nombre
END



Declare 
@provincia varchar(20)

EXECUTE dbo.DevolverProvincia 'Pepe', @provincia OUTPUT

SELECT @provincia


--3º Crear procedimiento que inserte datos en la tabla de cliente usando try cath, 
--pasandole los datos a insertar como variables/parámetros

CREATE PROCEDURE dbo.InsertarNuevoCliente @id_cliente int, @nombre varchar(20),@provincia varchar(20)
AS
BEGIN
BEGIN TRY
BEGIN TRAN
	insert into dbo.cliente (id_cliente,nombre,provincia) values
	(@id_cliente,@nombre,@provincia)
COMMIT
END TRY
BEGIN CATCH
	print error_message()
END CATCH
END

dbo.InsertarNuevoCliente 2,'Pepe','Madrid'

--4º Crear un procedimiento que nos devuelva 1 o 0 en función de si
-- la provincia que le pasamos por parámetro aparece dos o más veces 
-- en la tabla de cliente

CREATE PROCEDURE dbo.CLientesProvinciaMayor2 @provincia varchar(20) 
AS
BEGIN
	IF(SELECT COUNT(*)
		FROM [carrefour].[dbo].[cliente]
		WHERE PROVINCIA=@PROVINCIA)>1
	BEGIN
		RETURN 1
	END
	ELSE
		RETURN 0
END

DECLARE @rt int

exec @rt=dbo.CLientesProvinciaMayor2 'Madrid'
print @rt

--5º Crear un procedimiento que devuelva el numero de clientes de la
--  la provincia indicada como parámetro

CREATE PROCEDURE dbo.NumeroClientesProvincia @provincia varchar(20) 
AS
BEGIN
	RETURN (SELECT COUNT(*)
		FROM [carrefour].[dbo].[cliente]
		WHERE PROVINCIA=@PROVINCIA)

END

DECLARE @rt int

exec @rt=dbo.NumeroClientesProvincia 'Madrid'
print @rt

--6º Crear un procedimiento que verifique si un cliente existe (Con RETURN)



select count(*) from dbo.cliente where nombre='Pepe'

ALTER PROCEDURE dbo.ExisteCliente @id_cliente int 
AS
BEGIN
IF(SELECT COUNT(*)from dbo.cliente where id_cliente=@id_cliente)>0
	BEGIN
		RETURN 1
	END
	ELSE
		RETURN 0
END

DECLARE @rt int

exec @rt=dbo.ExisteCliente 1
print @rt


--7º Crear un procedimiento para crear un contrato pero que antes verifique 
--   si existe el cliente asignado (id_cliente) y mostrar el nombre del cliente
--   cuando se haya insertado su contraro, sino mostrar mensaje de que no existe cliente

ALTER PROCEDURE dbo.InsertarContratoConControlCliente @id_cliente int 
AS
BEGIN
DECLARE @rt int
DECLARE @nombre varchar(20)
exec @rt=dbo.ExisteCliente @id_cliente
IF(@rt)>0
	BEGIN
		set @nombre=(select nombre from cliente where id_cliente=@id_cliente)
		--insert into dbo.contrato (id_contrato,id_cliente,id_tipo_contrato,Fecha_Alta)
		--values(999178922,@id_cliente,12312,'2018-01-01')
		PRINT 'Contrato creado al usuario: ' + @nombre
	END
	ELSE
		PRINT 'No existe ese usuario'
END

DECLARE @rt int

dbo.InsertarContratoConControlCliente 1



--8º Actualizar la columna activo de la tabla cliente a S.  
  -- Crear un procedimiento que verifique si el cliente no tiene contrato o su 
  -- contrato esta caducado y que el procedimiento cambie la columna activo a N

CREATE PROCEDURE dbo.ControlUsuariosActivos
AS
BEGIN
	UPDATE DBO.CLIENTE SET ACTIVO='N' WHERE ID_CLIENTE IN 
  (select id_cliente from dbo.cliente cli left join dbo.contrato con on cli.id_cliente=con.id_cliente
  where con.id_cliente is null or con.fecha_caducidad<sysdatetime())
	UPDATE DBO.CLIENTE SET ACTIVO='S' WHERE ID_CLIENTE IN 
  (select id_cliente from dbo.cliente cli left join dbo.contrato con on cli.id_cliente=con.id_cliente
  where cli.activo='N' and( con.fecha_caducidad>sysdatetime() or con.fecha_caducidad is null))
END

--9º Hacer un clon de la tabla de ventas con sus datos
select * into dbo.clon_ventas from fact_ventas where id_mes=201801

--10 Usar un bucle while para aumentar el numero de unidades hasta superar la media de 
-- la fecha 201801 en 2 más
select avg(unidades) from clon_ventas


WHILE (select avg(unidades) from clon_ventas)<@parUnidades
	UPDATE clon_ventas SET UNIDADES=UNIDADES+1
  CONTINUE

--11º Recorrer fila a fila la tabla de cliente
DECLARE Cliente_Cursor CURSOR FOR  
SELECT id_cliente, nombre   
FROM dbo.cliente;  
OPEN Cliente_Cursor;  
FETCH NEXT FROM Cliente_Cursor;  
WHILE @@FETCH_STATUS = 0  
   BEGIN  
      FETCH NEXT FROM Cliente_Cursor;  
   END;  
CLOSE Cliente_Cursor;  
DEALLOCATE Cliente_Cursor;  
