-- 1.- CREAR UN PROCEDIMIENTO QUE NOS DEVUELVA LA FECHA Y HORA DEL MOMENTO DE EJECUCIÓN
 CREATE OR ALTER PROCEDURE DBO.FECHA_HORA
 AS
 -- HAY QUE DEFINIR LA VARIABLE COMO CADENA DE TEXTO PARA PODER CONCATENARLA CON EL TEXTO A MOSTRAR
 DECLARE @HORA NVARCHAR(50);
 --SET @HORA = (SELECT CAST(GETDATE() AS NVARCHAR(50)) );
 SET @HORA = GETDATE(); --COMO LA VARIABLE ES DE TEXTO NO HACE FALTA TRANSFORMAR LA FECHA
 -- 
 PRINT ('ESTA ES LA FECHA Y HORA DE EJECUCIÓN '+@HORA);
 GO
 DBO.FECHA_HORA;
 GO
 -- 2.- CREAR UN PROCEDIMIENTO, LLAMADO ALTA_PROFESOR, QUE NOS PERMITA DAR DE ALTA A UN NUEVO PROFESOR EN LA TABLA CRUSO_PROFESOR
 -- SE HA INCORPORADO UNA SEGUNDA SELECT AL PROCEDURE PARA MOSTRAR EL NOMBRE_ARTICULO
 CREATE OR ALTER PROCEDURE DBO.VENTAS_PRODUCTO
 @PRODUCTO NVARCHAR(250) = '%'
AS
SELECT * FROM CARREFOUR_VENTAS
	WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM CARREFOUR_ARTICULO
							WHERE NOMBRE_ARTICULO LIKE '%'+@PRODUCTO+'%')
;
SELECT NOMBRE_ARTICULO, V.* FROM CARREFOUR_VENTAS V
								JOIN CARREFOUR_ARTICULO A
									ON V.ID_ARTICULO = A.ID_ARTICULO
			WHERE NOMBRE_ARTICULO LIKE '%'+ @PRODUCTO +'%'
;
GO

DBO.VENTAS_PRODUCTO;

-- 3.- Crear un procedimiento, llamado ALTA_PROFESOR, que nos permita dar de alta a un nuevo profesor en la tabla CURSO_PROFESOR.
CREATE OR ALTER PROCEDURE ALTA_PROFESOR
		(
		 @NOMBRE NVARCHAR(50)
		,@APELLIDO1 NVARCHAR(50)
		,@APELLIDO2 NVARCHAR(50)
		)
AS
INSERT INTO CURSO_PROFESOR (COD_PROFESOR, NOMBRE, APELLIDO1, APELLIDO2)
VALUES ('P'+SUBSTRING(@NOMBRE,1,4)+SUBSTRING(@APELLIDO1,1,4),@NOMBRE,@APELLIDO1,@APELLIDO2)

GO

--4.- Crear un procedimiento, llamado BAJA_PROFESOR, que nos permita dar de baja a un profesor de la tabla CURSO_PROFESOR.

CREATE OR ALTER PROCEDURE BAJA_PROFESOR
		(
		 @NOMBRE NVARCHAR(50)
		,@APELLIDO1 NVARCHAR(50)
		,@APELLIDO2 NVARCHAR(50)
		)
AS
DELETE FROM CURSO_PROFESOR
WHERE NOMBRE = @NOMBRE AND APELLIDO1 = @APELLIDO1 AND APELLIDO2 = @APELLIDO2
GO


-- 5.- Crear un procedimiento que nos permita buscar un alumno sin necesidad de saber cual es su nombre o
		-- primer apellido completos. También debe permitir que busquemos alumnos utilizando solo uno de los dos.
CREATE PROCEDURE dbo.BUSCAR_ALUMNO 
	@NOMBRE NVARCHAR(30) = NULL -- ASIGNACIÓN POR DEFECTO DE UN VALOR A LA VARIABLE
	,@APELLIDO1 NVARCHAR(50) = NULL -- ASIGNACIÓN POR DEFECTO DE UN VALOR A LA VARIABLE
AS
SELECT * FROM DBO.CURSO_ALUMNO 
		WHERE NOMBRE LIKE '%'+ @NOMBRE +'%' 
			AND APELLIDO1  LIKE '%'+ @APELLIDO1 +'%'
GO

/*
-- 6.- Crear la tabla DBO.VENTAS_2 con los campos:
		ID_DIA, ID_MES, ID_ANO, ID_ARTICULO todos ellos de tipo bigint y no nulos.
		UNIDADES entero
		IMPORTE y MARGEN tipo decimal con 9 dígitos antes de la coma y 4 por detrás.
		UNIDADES_ACUM entero.
		IMPORTE_ACUM decimal con 9 dígitos antes de la coma y 4 por detrás.
		MARGEN_ACUM decimal con 9 dígitos antes de la coma y 4 por detrás.
*/
CREATE TABLE CARREFOUR.DBO.VENTAS_2 (
	ID_DIA BIGINT NOT NULL,
	ID_MES BIGINT NOT NULL,
	ID_ANO BIGINT NOT NULL,
	ID_ARTICULO BIGINT NOT NULL,
	UNIDADES INT,
	IMPORTE DECIMAL(13,4),
	MARGEN DECIMAL(13,4),
	UNIDADES_ACUM INT,
	IMPORTE_ACUM DECIMAL(13,4),
	MARGEN_ACUM DECIMAL(13,4)
	);

/*
-- 7.- Crear un procedimiento que, al ejecutarlo, indicándole un mes, en formato 201802, inserte 100 registros en la tabla teniendo en cuenta que:
		ID_DIA debe ser un día aleatorio del mes indicado.
		El campo ID_ARTICULO debe existir en la tabla de artículos.
		UNIDADES, IMPORTE y MARGEN deben ser datos aleatorios.
		Los campos ACUM deben contener la suma del campo correspondiente hasta el día del registro.
*/

CREATE OR ALTER PROCEDURE DBO.GEN_DATOS	
@ID_MES NVARCHAR(6)
AS
DECLARE @ID_DIA			INT--NVARCHAR(2)
		,@ID_DIA30		NVARCHAR(2)
		,@ID_DIA28		NVARCHAR(2)
		,@ID_ARTICULO	INT
		,@UNIDADES		INT
		,@IMPORTE		DECIMAL(13,4)
		,@MARGEN		DECIMAL(13,4)
		,@UND_MIN		INT				=	-1
		,@UND_MAX		INT				=	4
		,@PRECIO_MIN	INT				=	1
		,@PRECIO_MAX	INT				=	15
		,@CONTEO		INT				=	1

		SET NOCOUNT ON;
DROP TABLE IF EXISTS CARREFOUR.DBO.AUXILIAR;
CREATE TABLE CARREFOUR.DBO.AUXILIAR (
	ID_DIA			BIGINT
	,ID_MES			BIGINT
	,ID_ANO			BIGINT
	,ID_ARTICULO	BIGINT
	,UNIDADES		INT
	,IMPORTE		DECIMAL(13,4)
	,MARGEN			DECIMAL(13,4)
	);		

WHILE @CONTEO <100
BEGIN
	SET @ID_DIA30 = CAST((30-1)*RAND()+1 AS INT);
	SET @ID_DIA28 = CAST((28-1)*RAND()+1 AS INT);
	SET @ID_DIA = (SELECT CASE WHEN SUBSTRING(@ID_MES,5,2) = '02' THEN 
														CASE WHEN @ID_DIA28 < 10 THEN @ID_MES +'0'+ @ID_DIA28
																ELSE @ID_MES + @ID_DIA28 END
										ELSE
											CASE WHEN @ID_DIA30 < 10 THEN @ID_MES +'0'+ @ID_DIA30
															ELSE @ID_MES + @ID_DIA30 END
															
					END);
	SET @ID_ARTICULO = (SELECT TOP 1 ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO ORDER BY NEWID());
	SET @UNIDADES = ROUND((@UND_MAX-@UND_MIN)*RAND()+ @UND_MIN,0);
	SET @IMPORTE = @UNIDADES*((@PRECIO_MAX-@PRECIO_MIN)*RAND()+@PRECIO_MIN);
	SET @MARGEN = (@IMPORTE/2 - @IMPORTE/10)*RAND()+@IMPORTE/10;
--SELECT @ID_MES, SUBSTRING(@ID_MES,1,4) , @ID_DIA, @ID_ARTICULO, @UNIDADES, @IMPORTE, @MARGEN;

INSERT INTO DBO.AUXILIAR VALUES(CAST(@ID_DIA AS BIGINT), CAST(@ID_MES AS BIGINT), CAST(SUBSTRING(@ID_MES,1,4) AS BIGINT), 
				@ID_ARTICULO, @UNIDADES, @IMPORTE, @MARGEN);
DELETE FROM AUXILIAR WHERE UNIDADES = 0;

    MERGE DBO.VENTAS_2 as V
    USING(SELECT ID_DIA, ID_MES, ID_ANO, ID_ARTICULO, 
			SUM(UNIDADES) AS U, SUM(IMPORTE) AS I, SUM(MARGEN) AS M FROM DBO.AUXILIAR
			GROUP BY ID_DIA, ID_MES, ID_ANO, ID_ARTICULO
			HAVING SUM(UNIDADES) <>0) AS A
    ON (V.ID_DIA = A.ID_DIA
		AND V.ID_ARTICULO = A.ID_ARTICULO )
    WHEN MATCHED THEN
        UPDATE SET UNIDADES = A.U, 
                   IMPORTE = A.I,
				   MARGEN = A.M
    WHEN NOT MATCHED THEN
        INSERT (ID_DIA,ID_MES,ID_ANO,ID_ARTICULO, UNIDADES, IMPORTE, MARGEN)
        VALUES (A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO, A.U, A.I, A.M);

	SET @CONTEO = (SELECT COUNT(*) FROM DBO.VENTAS_2 WHERE ID_MES = @ID_MES);
	--SET @CONTEO = @CONTEO+1
END;
-- INSERTAR DATOS ACUMULADOS
BEGIN
UPDATE VENTAS_2
	SET UNIDADES_ACUM =  U FROM (SELECT A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO, 
						SUM(A2.UNIDADES) U,SUM(A2.IMPORTE) I, SUM(A2.MARGEN) M
							FROM AUXILIAR A
								JOIN AUXILIAR A2
									ON A.ID_DIA >= A2.ID_DIA
										AND A.ID_MES = A2.ID_MES
										AND A.ID_ARTICULO = A2.ID_ARTICULO
							WHERE A.UNIDADES <>0
					GROUP BY A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO
					) AS C
						JOIN VENTAS_2 V
							ON V.ID_ARTICULO = C.ID_ARTICULO
								AND V.ID_DIA = C.ID_DIA;
UPDATE VENTAS_2
	SET IMPORTE_ACUM =  I FROM (SELECT A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO, 
						SUM(A2.UNIDADES) U,SUM(A2.IMPORTE) I, SUM(A2.MARGEN) M
							FROM AUXILIAR A
								JOIN AUXILIAR A2
									ON A.ID_DIA >= A2.ID_DIA
										AND A.ID_MES = A2.ID_MES
										AND A.ID_ARTICULO = A2.ID_ARTICULO
							WHERE A.UNIDADES <>0
					GROUP BY A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO
					) AS C
						JOIN VENTAS_2 V
							ON V.ID_ARTICULO = C.ID_ARTICULO
								AND V.ID_DIA = C.ID_DIA;
UPDATE VENTAS_2
	SET  MARGEN_ACUM =  M FROM (SELECT A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO, 
						SUM(A2.UNIDADES) U,SUM(A2.IMPORTE) I, SUM(A2.MARGEN) M
							FROM AUXILIAR A
								JOIN AUXILIAR A2
									ON A.ID_DIA >= A2.ID_DIA
										AND A.ID_MES = A2.ID_MES
										AND A.ID_ARTICULO = A2.ID_ARTICULO
							WHERE A.UNIDADES <>0
					GROUP BY A.ID_DIA, A.ID_MES, A.ID_ANO, A.ID_ARTICULO
					) AS C
						JOIN VENTAS_2 V
							ON V.ID_ARTICULO = C.ID_ARTICULO
								AND V.ID_DIA = C.ID_DIA;
END
;


DBO.GEN_DATOS 201802
DBO.GEN_DATOS 201801
DBO.GEN_DATOS 201803

SELECT * FROM VENTAS_2 ORDER BY ID_DIA
SELECT ID_MES, COUNT(*) FROM VENTAS_2 GROUP BY ID_MES

TRUNCATE TABLE VENTAS_2
