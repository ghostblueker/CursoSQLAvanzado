/*

EJERCICIOS DE SUBCONSULTAS

*/

-- 1.- EXTRAER EL NOMBRE DEL PRODUCTO MAS VENDIDO

SELECT * FROM DBO.CARREFOUR_ARTICULO
WHERE ID_ARTICULO = (SELECT TOP 1 ID_ARTICULO FROM DBO.CARREFOUR_VENTAS
						GROUP BY ID_ARTICULO
						ORDER BY SUM(UNIDADES) DESC
						)

INSERT INTO DBO.CARREFOUR_ARTICULO 
	VALUES (175679, 'A0176344',	20,	0,	'EXCAVADORA') ;

SELECT * FROM DBO.CARREFOUR_ARTICULO
WHERE ID_ARTICULO = (SELECT TOP 1 ID_ARTICULO 
						FROM DBO.CARREFOUR_VENTAS
							GROUP BY ID_ARTICULO
							ORDER BY SUM(UNIDADES) DESC)

-- 2.- Mostrar los productos cuyo importe supera la media del importe de enero de 2018.

SELECT NOMBRE_ARTICULO FROM DBO.CARREFOUR_ARTICULO WHERE ID_ARTICULO IN (
SELECT DISTINCT ID_ARTICULO FROM DBO.CARREFOUR_VENTAS WHERE
IMPORTE_VENTA > (SELECT AVG(IMPORTE_VENTA) FROM DBO.CARREFOUR_VENTAS WHERE ID_MES = 201801)
)
--GROUP BY NOMBRE_ARTICULO
--ORDER BY 1

-- 3.- SELECCIONAR EL SOCIO CON MAYOR MARGEN TOTAL
SELECT * FROM DBO.CARREFOUR_SOCIO 
WHERE ID_SOCIO = (SELECT TOP 1 ID_SOCIO FROM DBO.CARREFOUR_VENTAS
						GROUP BY ID_SOCIO
						ORDER BY SUM(MARGEN) DESC)

-- 4.- MOSTRAR LAS MARCAS DE TODOS LOS PROVEEDORES DE TIPO 5
SELECT NOMBRE_MARCA FROM DBO.CARREFOUR_MARCAS
WHERE ID_PROVEEDOR IN (SELECT ID_PROVEEDOR FROM DBO.CARREFOUR_PROVEEDOR
						WHERE ID_TIPO_PROVEEDOR = 5)

-- 5.- EXTRAER LOS DATOS DE LOS SOCIOS CON MÁS DE 3 TIENDAS
SELECT NOMBRE_SOCIO FROM DBO.CARREFOUR_SOCIO 
WHERE ID_SOCIO IN (
					SELECT ID_SOCIO FROM DBO.CARREFOUR_TIENDAS GROUP BY ID_SOCIO
					HAVING COUNT(*) > 3)


-- 6.- MOSTAR EL TOTAL DE UNIDADES, IMPORTES Y MÁRGENES DEL SOCIO C00002 AGRUPADO SEGÚN SUS
-- TIENDAS Y FECHA

SELECT ID_DIA, ID_TIENDA, SUM(UNIDADES) AS TOTAL_UNIDADES, 
SUM(IMPORTE_VENTA) AS TOTAL_VENTAS, SUM(MARGEN) AS TOTAL_MARGEN
FROM DBO.CARREFOUR_VENTAS
WHERE ID_SOCIO = (SELECT ID_SOCIO FROM DBO.CARREFOUR_SOCIO 
					WHERE NOMBRE_SOCIO = 'C00002')
GROUP BY ID_DIA, iD_TIENDA
ORDER BY 1
-- 7.- MOSTRAR EL IMPORTE DE VENTA DEL ARTÍCULO CON MAYOR IMPORTE DE COMPRA
SELECT IMPORTE_VENTA FROM DBO.CARREFOUR_VENTAS
	WHERE ID_ARTICULO IN (SELECT TOP 1 ID_ARTICULO FROM DBO.CARREFOUR_COMPRAS
							ORDER BY IMPORTE_COMPRA DESC)

-- 8.- CALCULAR IMPORTES Y MARGEN DE TODOS LOS ARTÍCULOS VENDIDOS DE LOS PROVEEDORES DE TIPO 2
SELECT ID_ARTICULO,SUM(UNIDADES), SUM(IMPORTE_VENTA) AS IMPORTE, SUM(MARGEN) AS MARGEN, SUM(IMPORTE_VENTA)/SUM(UNIDADES)
FROM DBO.CARREFOUR_VENTAS
WHERE ID_ARTICULO IN ( SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
						WHERE ID_MARCA IN (SELECT ID_MARCA FROM DBO.CARREFOUR_MARCAS
											WHERE ID_PROVEEDOR IN (SELECT ID_PROVEEDOR FROM DBO.CARREFOUR_PROVEEDOR
																	WHERE ID_TIPO_PROVEEDOR = 2)
										)
						)
GROUP BY ID_ARTICULO

-- 9.- MOSTRAR LAS UNIDADES, IMPORTES Y MARGEN AGRUPADO POR PRODUCTOS DE LAS MARCAS PROPIAS
SELECT ID_ARTICULO, SUM(UNIDADES) AS UNIDADES, SUM(IMPORTE_VENTA) AS IMPORTE, SUM(MARGEN) AS MARGEN FROM DBO.CARREFOUR_VENTAS
WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
						WHERE ID_MARCA IN (SELECT ID_MARCA FROM DBO.CARREFOUR_MARCAS
											WHERE MARCA_PROPIA = 'S'
											)
						)
GROUP BY ID_ARTICULO

-- 10.- CUANTAS COMPRAS HA REALIZADO EL SOCIO C00034

SELECT 'NÚMERO DE COMPRAS SOCIO C00034', ID_SOCIO, COUNT(*) FROM DBO.CARREFOUR_VENTAS
WHERE ID_SOCIO IN (SELECT ID_SOCIO FROM DBO.CARREFOUR_SOCIO WHERE NOMBRE_SOCIO IN ('C00034','C00002'))
GROUP BY ID_SOCIO;

-- 11.- Extraer todas las ventas del producto con más margen de 2018

SELECT * FROM DBO.CARREFOUR_VENTAS
WHERE ID_ARTICULO = (SELECT TOP 1 ID_ARTICULO FROM DBO.CARREFOUR_VENTAS
						GROUP BY ID_ARTICULO
						ORDER BY SUM(MARGEN) DESC)

-- 12.- Extraer la marca con el nombre de artículo más largo

SELECT NOMBRE_MARCA FROM DBO.CARREFOUR_MARCAS
WHERE ID_MARCA = (SELECT TOP 1 ID_MARCA FROM DBO.CARREFOUR_ARTICULO 
					ORDER BY LEN(NOMBRE_ARTICULO) DESC)
SELECT * FROM DBO.CARREFOUR_ARTICULO ORDER BY LEN(NOMBRE_ARTICULO) DESC

-- 13.- Comprobar si existen ventas de artículos, socios o tiendas que no aparezcan en las 
--     tablas de dimensión correspondientes.

SELECT DISTINCT ID_TIENDA, ID_SOCIO, ID_ARTICULO FROM DBO.CARREFOUR_VENTAS
	WHERE ID_TIENDA NOT IN (SELECT DISTINCT ID_TIENDA FROM DBO.CARREFOUR_TIENDAS)
		OR ID_SOCIO NOT IN (SELECT DISTINCT ID_SOCIO FROM DBO.CARREFOUR_SOCIO)
		OR ID_ARTICULO NOT IN (SELECT DISTINCT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO)

SELECT DISTINCT V.ID_TIENDA, V.ID_SOCIO, V.ID_ARTICULO, A.ID_ARTICULO, S.ID_SOCIO, T.ID_TIENDA
	FROM DBO.CARREFOUR_VENTAS V
		LEFT JOIN DBO.CARREFOUR_SOCIO S
			ON S.ID_SOCIO = V.ID_SOCIO
		LEFT JOIN DBO.CARREFOUR_TIENDAS T
			ON T.ID_TIENDA = V.ID_TIENDA
		LEFT JOIN DBO.CARREFOUR_ARTICULO A
			ON A.ID_ARTICULO = V.ID_ARTICULO
WHERE A.ID_ARTICULO IS NULL 
	OR S.ID_SOCIO IS NULL
	OR T.ID_TIENDA IS NULL

SELECT DISTINCT  V.ID_SOCIO, S.ID_SOCIO
	FROM DBO.CARREFOUR_VENTAS V
		FULL OUTER JOIN DBO.CARREFOUR_SOCIO S
			ON S.ID_SOCIO = V.ID_SOCIO
WHERE V.ID_SOCIO IS NULL

-- 14.- Extraer los registros de ventas de enero de 2018 de artículos que se compraron en diciembre de 2017.

SELECT * FROM DBO.CARREFOUR_VENTAS WHERE
ID_ARTICULO IN (SELECT DISTINCT ID_ARTICULO FROM DBO.CARREFOUR_COMPRAS WHERE ID_MES = 201712)
AND ID_MES = 201801

SELECT * FROM DBO.CARREFOUR_VENTAS V 
WHERE EXISTS (SELECT * FROM DBO.CARREFOUR_COMPRAS C WHERE V.ID_ARTICULO = C.ID_ARTICULO
	AND C.ID_MES = 201712)
	AND V.ID_MES =201801

-- 15.- Mostrar el importe de venta de las tiendas del socio C00034 agrupado por mes y ordenado por fecha.
SELECT ID_MES, ID_TIENDA, SUM(IMPORTE_VENTA) FROM DBO.CARREFOUR_VENTAS
WHERE ID_SOCIO = (SELECT iD_SOCIO FROM DBO.CARREFOUR_SOCIO WHERE NOMBRE_SOCIO = 'C00034')
AND ID_TIENDA NOT IN (SELECT ID_TIENDA FROM DBO.CARREFOUR_TIENDAS WHERE ID_SOCIO = (
						SELECT iD_SOCIO FROM DBO.CARREFOUR_SOCIO WHERE NOMBRE_SOCIO = 'C00034'))
GROUP BY ID_MES,ID_TIENDA
ORDER BY ID_MES


-- 16.- CALCULAR EL MARGEN MEDIO DE LAS MARCAS PROPIAS Y LAS MARCAS NO PROPIAS
SELECT 'MARCA NO PROPIA', AVG(MARGEN) AS MEDIA_MARGEN FROM DBO.CARREFOUR_VENTAS
		WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
								WHERE ID_MARCA IN (SELECT ID_MARCA FROM DBO.CARREFOUR_MARCAS
														WHERE MARCA_PROPIA = 'N'))
UNION
SELECT 'MARCA PROPIA', AVG(MARGEN) AS MEDIA_MARGEN FROM DBO.CARREFOUR_VENTAS
		WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
								WHERE ID_MARCA IN (SELECT ID_MARCA FROM DBO.CARREFOUR_MARCAS
														WHERE MARCA_PROPIA = 'S'))

-- 17.- ¿Cuáles son los datos del proveedor con el artículo que proporciona más margen?

SELECT * FROM DBO.CARREFOUR_PROVEEDOR
	WHERE ID_PROVEEDOR IN (SELECT ID_PROVEEDOR FROM CARREFOUR_MARCAS
								WHERE ID_MARCA IN (SELECT ID_MARCA FROM CARREFOUR_ARTICULO
														WHERE ID_ARTICULO IN (SELECT TOP 1 ID_ARTICULO FROM CARREFOUR_VENTAS
																				GROUP BY ID_ARTICULO
																				ORDER BY SUM(MARGEN) DESC)))

-- 18.-Calcular las compras de los artículos de la marca PETs agrupadas por mes.
SELECT ID_MES, SUM(IMPORTE_VENTA) AS IMPORTE_TOTAL FROM CARREFOUR_VENTAS
		WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
								WHERE ID_MARCA IN (SELECT ID_MARCA FROM DBO.CARREFOUR_MARCAS
														WHERE NOMBRE_MARCA = 'PETS'))
GROUP BY ID_MES


/*

EJERCICIOS DE SENTENCIAS DDL

*/

-- CREATE TABLE

/*
--1.- Crear una tabla de empleados incluyendo los campos
		ID_EMPLEADO como bigint, clave primaria y autoincremental
		NOMBRE texto de tamaño 30 no nulo y clave única
		DIRECCION texto de tamaño 255 nulo 
		DNI texto de tamaño 9 no nula y clave única
		TELEFONO numérico nulo
		CARGO texto de tamaño 45 nulo
		SALARIO numérico con dos decimales nulo
*/

CREATE TABLE CARREFOUR.DBO.CARREFOUR_EMPLEADOS (
		ID_EMPLEADO BIGINT IDENTITY(0,1)
		,NOMBRE NVARCHAR(30) NOT NULL
		,DIRECCION NVARCHAR(255) NULL
		,DNI NVARCHAR(9) NOT NULL
		,TELEFONO INT
		,CARGO NVARCHAR(45) NULL
		,SALARIO DECIMAL (8,2)
		PRIMARY KEY (ID_EMPLEADO),
		UNIQUE (DNI)
	);

--2.- Crear una tabla idéntica a la tabla CARREFOUR_ARTICULO con nuestras iniciales.

SELECT * INTO CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
FROM CARREFOUR.DBO.CARREFOUR_ARTICULO
;

--3.- Crear una tabla con todos los datos de las ventas del garfio pirata
SELECT * INTO CARREFOUR.DBO.GARFIO_PIRATA
FROM DBO.CARREFOUR_VENTAS
WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO WHERE NOMBRE_ARTICULO LIKE '%GARFIO PIRATA%')


--4.- Crear una tabla con los campos ID de la tabla de ventas solo de los artículos que no aparezcan en la tabla de dimensión.
SELECT ID_DIA, ID_MES, ID_ANO, ID_ARTICULO, ID_SOCIO, ID_TIENDA INTO CARREFOUR.DBO.FALTANTES
FROM DBO.CARREFOUR_VENTAS WHERE ID_ARTICULO NOT IN (SELECT DISTINCT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO)


-- ALTER TABLE

--1.- CAMBIOS SOBRE LA TABLA EMPLEADOS
	--1.1.- Añadir dos columnas, APELLIDO1 y APELLIDO2 con tamaño 30 y el primer apellido no nulo.
	ALTER TABLE DBO.CARREFOUR_EMPLEADOS
	ADD APELLIDO1 NVARCHAR(30) NOT NULL
		, APELLIDO2 NVARCHAR(30)
	;
	
	--1.2.- Eliminar el campo teléfono.
	ALTER TABLE DBO.CARREFOUR_EMPLEADOS
	DROP COLUMN TELEFONO
	;

	--1.3.- Insertar el nombre y primer apellido de todos los presentes.
	INSERT INTO DBO.CARREFOUR_EMPLEADOS (NOMBRE, APELLIDO1)
		VALUES ('ALBA', 'ORTEGA')
				,('ANTONIO', 'RIVERA')
				,('CARLOS', 'SAUCA')
				,('ENRIQUE', 'CEPEDA')
				,('JOAQUIN', 'GARCIA')
--DARÁ ERROR PORQUE EL CAMPO DNI NO PUEDE SER NULO NI ÚNICO. TENDREMOS QUE INCLUIRLO.

--2.- Cambios sobre nuestra tabla de artículo 
	--2.1.- Convertir el campo ID_ARTICULO en clave primaria.
	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	ADD CONSTRAINT PK_ARTICULO_ARC
		PRIMARY KEY (ID_ARTICULO);

	--2.2.- Transformar el campo COD_ARTICULO a clave única.
	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	ADD CONSTRAINT UK_ARTICULO_ARC
		UNIQUE (COD_ARTICULO);

	--2.3.- Modificar la clave primaria de la tabla para incluir en ella el campo COD_ARTICULO.
	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	DROP CONSTRAINT PK_ARTICULO_ARC

	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	ADD CONSTRAINT PK_ARTICULO_ARC
		PRIMARY KEY (ID_ARTICULO, COD_ARTICULO);

	--2.4.- Añadir un campo nuevo de nombre ID_PROVEEDOR de tipo bigint y que no sea nulo.
	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	ADD ID_PROVEEDOR BIGINT NOT NULL
	--NOS DA ERROR PORQUE YA EXISTEN DATOS EN LA TABLA Y LOS RELLENARÍA CON NULOS
	ALTER TABLE CARREFOUR.DBO.CARREFOUR_ARTICULO_ARC
	ADD ID_PROVEEDOR BIGINT NOT NULL DEFAULT 0
	-- RELLENAMOS LA COLUMNA CON CEROS

--3.- Cambios sobre la tabla de ventas creada en la sección anterior para el garfio pirata.
	--3.1.- Crear la clave primaria con los campos ID_DIA, ID_SOCIO, ID_TIENDA e ID_ARTICULO.
	ALTER TABLE CARREFOUR.DBO.GARFIO_PIRATA
	ADD CONSTRAINT PK_GARFIO_PIRATA
		PRIMARY KEY (ID_DIA, ID_SOCIO, ID_TIENDA, ID_ARTICULO);

	--3.2.- Eliminar los campos correspondientes a acumulados.
	ALTER TABLE CARREFOUR.DBO.GARFIO_PIRATA
	DROP COLUMN IMPORTE_VENTA_MES_ACUM
				,UNIDADES_VENTA_MES_ACUM
				,MARGEN_MES_ACUM
				,IMPORTE_VENTA_ANO_ACUM
				,UNIDADES_VENTA_ANO_ACUM
				,MARGEN_ANO_ACUM
				;


	--3.3.- Insertar datos de ventas de los artículos de la marca PETS.
	INSERT INTO CARREFOUR.DBO.GARFIO_PIRATA
	SELECT ID_DIA, ID_MES, ID_ANO, ID_TIENDA, ID_SOCIO, ID_ARTICULO, ID_BU, UNIDADES, IMPORTE_VENTA, IVA, MARGEN
	FROM CARREFOUR.DBO.CARREFOUR_VENTAS WHERE ID_ARTICULO IN (SELECT ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO
																	WHERE NOMBRE_ARTICULO LIKE '%PETS%')

	--3.4.- Insertar dos columnas para ID_MARCA e ID_PROVEEDOR.
	ALTER TABLE CARREFOUR.DBO.GARFIO_PIRATA
	ADD ID_MARCA BIGINT,
		ID_PROVEEDOR BIGINT

	--3.5.- Actualizar la tabla para incluir los datos de la marca y el proveedor.
	UPDATE DBO.GARFIO_PIRATA 
			SET ID_MARCA = C.ID_MARCA FROM (SELECT A.ID_MARCA, A.ID_ARTICULO FROM DBO.CARREFOUR_ARTICULO	A
											JOIN DBO.GARFIO_PIRATA P
												ON A.ID_ARTICULO = P.ID_ARTICULO
												) AS C
												JOIN DBO.GARFIO_PIRATA GP
													ON GP.ID_ARTICULO = C.ID_ARTICULO;
	UPDATE DBO.GARFIO_PIRATA 
			SET ID_PROVEEDOR = A.ID_PROVEEDOR FROM (SELECT M.ID_PROVEEDOR, A.ID_ARTICULO FROM DBO.CARREFOUR_MARCAS M
															JOIN DBO.CARREFOUR_ARTICULO A
																ON A.ID_MARCA = M.ID_MARCA) AS A
																	JOIN DBO.GARFIO_PIRATA P
																		ON P.ID_ARTICULO = A.ID_ARTICULO
											


-- DROP Y TRUNCATE

-- 1.- CREAR UNA TABLA LLAMADA MARCAS_PROPIAS QUE CONTENGA TODOS LOS DATOS DE LAS MARCAS CUYO CAMPO MARCA_PROPIA CONTENGA UNA 'S'
SELECT * INTO CARREFOUR.DBO.MARCAS_PROPIAS
FROM DBO.CARREFOUR_MARCAS WHERE MARCA_PROPIA ='S'
	--1.1.- MODIFICAR EL CAMPO ID_MARCA PARA QUE SEA CLAVE PRIMARIA
	ALTER TABLE DBO.MARCAS_PROPIAS
	ADD CONSTRAINT PK_ID_MARCA PRIMARY KEY (ID_MARCA)
	--1.2.- CAMBIAR EL CAMPO COD_MARCA PARA QUE SEA UNA CLAVE ÚNICA
	ALTER TABLE DBO.MARCAS_PROPIAS
	ADD CONSTRAINT UK_COD_MARCA UNIQUE (COD_MARCA)

-- 2.- CREAR UNA TABLA LLAMADA MARCAS_NO_PROPIAS QUE CONTENGA TODOS LOS DATOS DE LAS MARCAS CUYO CAMPO MARCA_PROPIA CONTENGA UNA 'N'
SELECT * INTO CARREFOUR.DBO.MARCAS_NO_PROPIAS
FROM DBO.CARREFOUR_MARCAS WHERE MARCA_PROPIA ='N'
	--2.1.- MODIFICAR EL CAMPO ID_MARCA PARA QUE SEA CLAVE PRIMARIA
	ALTER TABLE DBO.MARCAS_NO_PROPIAS
	ADD CONSTRAINT PK_ID_MARCA_NP PRIMARY KEY (ID_MARCA)
	--2.2.- CAMBIAR EL CAMPO COD_MARCA PARA QUE SEA UNA CLAVE ÚNICA
	ALTER TABLE DBO.MARCAS_NO_PROPIAS
	ADD CONSTRAINT UK_COD_MARCA_NP UNIQUE (COD_MARCA)
--3.- Eliminar la tabla MARCAS_NO_PROPIAS.
DROP TABLE DBO.MARCAS_NO_PROPIAS
--4.- Borrar la tabla MARCAS_PROPIAS.
TRUNCATE TABLE DBO.MARCAS_PROPIAS
--5.- Comparar que ha pasado con ambas tablas lanzando consultas select sobre ellas.
SELECT * FROM  DBO.MARCAS_NO_PROPIAS
SELECT * FROM  DBO.MARCAS_PROPIAS



/*

EJERCICIOS VISTAS

*/
-- 1.-Crear una vista que contenga el id del socio y la tienda, el nombre del socio y el nombre de sus tiendas.
CREATE VIEW DBO.VISTA1 AS
SELECT S.ID_SOCIO, T.ID_TIENDA, S.NOMBRE_SOCIO, T.NOMBRE_TIENDA
	FROM DBO.CARREFOUR_SOCIO S
		FULL OUTER JOIN DBO.CARREFOUR_TIENDAS T
			ON S.ID_SOCIO = T.ID_SOCIO;

SELECT * FROM VISTA1;

-- 2.- Preparar una vista que muestre los nombres de los artículos con sus marcas y proveedores.
CREATE VIEW VISTA_2 AS
SELECT ID_ARTICULO, NOMBRE_ARTICULO, NOMBRE_MARCA, NOMBRE_PROVEEDOR
	FROM CARREFOUR_ARTICULO	A
		LEFT JOIN CARREFOUR_MARCAS M
			ON A.ID_MARCA = M.ID_MARCA
		RIGHT JOIN CARREFOUR_PROVEEDOR P
			ON M.ID_PROVEEDOR = P.ID_PROVEEDOR

SELECT * FROM VISTA_2;

-- 3.-Crear una vista que devuelva todos los importes de venta agrupados por día, socio, tienda y artículo.
CREATE VIEW VISTA_3 AS
SELECT V.ID_DIA, V.ID_SOCIO, S.NOMBRE_SOCIO, T.NOMBRE_TIENDA, A.NOMBRE_ARTICULO, SUM(V.IMPORTE_VENTA) AS IMPORTE
	FROM CARREFOUR_VENTAS V
		LEFT JOIN CARREFOUR_SOCIO S
			ON V.ID_SOCIO = S.ID_SOCIO
		LEFT JOIN CARREFOUR_TIENDAS T
			ON V.ID_TIENDA = T.ID_TIENDA
		LEFT JOIN CARREFOUR_ARTICULO A
			ON V.ID_ARTICULO = A.ID_ARTICULO
GROUP BY  V.ID_DIA, V.ID_SOCIO,S.NOMBRE_SOCIO, T.NOMBRE_TIENDA, A.NOMBRE_ARTICULO;

SELECT * FROM VISTA_3;

-- 4.-Preparar una vista que agrupe los datos de la tabla de ventas a nivel mensual.
CREATE VIEW VISTA_4 AS
SELECT ID_MES, ID_SOCIO, ID_TIENDA, ID_ARTICULO, SUM(IMPORTE_VENTA) AS IMPORTE, 
		SUM(UNIDADES) AS UNIDADES, SUM(MARGEN) AS MARGEN, AVG(IVA) AS IVA
	FROM DBO.CARREFOUR_VENTAS
GROUP BY ID_MES, ID_SOCIO, ID_TIENDA, ID_ARTICULO

-- 5.- Crear una vista que devuelva el importe de venta y el margen del año en el que nos encontremos al ejecutarla.
CREATE VIEW VISTA_5 AS 
SELECT SUM(IMPORTE_VENTA) AS IMPORTE_ANUAL, SUM(MARGEN) AS MARGEN_ANUAL FROM DBO.CARREFOUR_VENTAS
				WHERE ID_ANO = CAST(SUBSTRING(CAST(GETDATE() AS NVARCHAR(20)),8,4) AS INT)

-- 6.- Crear una vista que muestre los nombres de los socios y sus tiendas, el mes y la cantidad de unidades vendidas.
CREATE VIEW VISTA_6 AS
SELECT S.NOMBRE_SOCIO, T.NOMBRE_TIENDA, V.ID_MES, SUM(UNIDADES) AS UNIDADES
FROM DBO.CARREFOUR_VENTAS V
	JOIN  DBO.CARREFOUR_SOCIO S
		ON S.ID_SOCIO = V.ID_SOCIO
	JOIN DBO.CARREFOUR_TIENDAS T
		ON T.ID_TIENDA = V.ID_TIENDA
			AND S.ID_SOCIO = T.ID_SOCIO
GROUP BY S.NOMBRE_SOCIO, T.NOMBRE_TIENDA, V.ID_MES

-- 7.- Crear una vista que devuelva todos los datos de la tabla de ventas.
--ESTA VISTA NO ES FUNCIONAL
CREATE VIEW VISTA_7 AS
SELECT * FROM DBO.CARREFOUR_VENTAS


--8.- Preparar una vista que devuelva el id y nombre del artículo junto con el total de margen de venta.
CREATE VIEW VISTA_8 AS
SELECT V.ID_ARTICULO, A.NOMBRE_ARTICULO, SUM(V.MARGEN) AS MARGEN
FROM CARREFOUR_VENTAS V
	LEFT JOIN CARREFOUR_ARTICULO A
		ON A.ID_ARTICULO = V.ID_ARTICULO

--9.- Crear una vista con todas las marcas para las que no existe un proveedor asignado.
CREATE VIEW VISTA_9 AS
SELECT * FROM CARREFOUR_MARCAS
		WHERE ID_PROVEEDOR NOT IN (SELECT DISTINCT ID_PROVEEDOR FROM CARREFOUR_PROVEEDOR
											WHERE ID_PROVEEDOR <> 0)

--10.- Crear una vista que muestre las cantidades totales de unidades compradas y vendidas y su diferencia agregadas por artículo y socio.
CREATE VIEW VISTA_10 AS
SELECT COALESCE(V.ID_SOCIO,C.ID_SOCIO), COALESCE(V.ID_ARTICULO,C.ID_ARTICULO)
	, SUM(C.UNIDADES) AS UNIDADES_COMPRADAS, SUM(V.UNIDADES) AS UNIDADES_VENDIDAS
FROM CARREFOUR_VENTAS V
	FULL OUTER JOIN CARREFOUR_COMPRAS C
		ON V.ID_SOCIO = C.ID_SOCIO
			AND V.ID_ARTICULO = C.ID_ARTICULO
			AND V.ID_DIA > C.ID_DIA

--11.- Preparar una vista que indique el stock disponible de artículos por socio y generando una columna adicional que indique 
		--la necesidad de realizar una revisión de los datos cuando el socio vendiera más artículos de los comprados.
CREATE VIEW VISTA_11 AS
SELECT ID_SOCIO, ID_ARTICULO, UNIDADES_COMPRADAS, UNIDADES_VENDIDAS, UNIDADES_COMPRADAS-UNIDADES_VENDIDAS,
CASE WHEN UNIDADES_COMPRADAS-UNIDADES_VENDIDAS <0 THEN 'REVISAR DATOS'
			ELSE 'TODO CORRECTO' END AS REVISION
FROM VISTA_10 


--12.- Calcular una vista que muestre los totales de unidades vendidas y margen obtenido agrupado por marca y mes.
CREATE VIEW VISTA_12 AS
SELECT ID_MES, ID_MARCA, SUM(UNIDADES), SUM(MARGEN)
FROM CARREFOUR_VENTAS
GROUP BY  ID_MES, ID_MARCA

--13.- Crear una vista que nos devuelva los importes de venta de enero 2018 y 2017 agrupados por socio y artículo, 
		--la diferencia y la variación. Ordenar por variación descendiente.

CREATE VIEW VISTA_13 AS 
SELECT V.ID_MES,
		COALESCE(V.ID_SOCIO,V2.ID_SOCIO) ID_SOCIO,
		COALESCE(V.ID_ARTICULO, V2.ID_ARTICULO) ID_ARTICULO,
		SUM(V.IMPORTE_VENTA) AS IMPORTE_VENTA_201801, SUM(V2.IMPORTE_VENTA) AS IMPORTE_VENTA_201701
FROM CARREFOUR_VENTAS V
	LEFT JOIN CARREFOUR_VENTAS V2
		ON V.ID_ARTICULO = V2.ID_ARTICULO
			AND V.ID_SOCIO = V2.ID_SOCIO
			AND V.ID_TIENDA = V2.ID_TIENDA
			AND V.ID_MES = V2.ID_MES-100
GROUP BY V.ID_MES,
		COALESCE(V.ID_SOCIO,V2.ID_SOCIO),
		COALESCE(V.ID_ARTICULO, V2.ID_ARTICULO)

